name: Test PR Merge

on:
  pull_request:
    branches: ["master"]
    types: [opened, reopened, synchronize]

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  merge-pr:
    name: "Merge Pull Request"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Add PR Comment
      uses: actions/github-script@v7.0.0
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.rest.issues.createComment({
            issue_number: context.payload.pull_request.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'âœ… Deploy to test environment completed successfully. Merging PR now.'
          });

    - name: Merge Pull Request
      uses: actions/github-script@v7.0.0
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const core = require('@actions/core');
          try {
            await github.rest.pulls.merge({
              pull_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              merge_method: 'merge',
              commit_title: `Merge pull request #${context.payload.pull_request.number}: Deploy to UAT successful`,
              commit_message: 'Automatically merged by GitHub Actions after successful UAT deployment'
            });
            
            // Delete the feature branch after successful merge (if not from a fork)
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });
            if (!pr.data.head.repo.fork) {
              const branchName = pr.data.head.ref;
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `heads/${branchName}`
              });
            }
          } catch (error) {
            console.log(`Error during merge operation: ${error.message}`);
            core.setFailed(`Failed to merge PR: ${error.message}`);
          }
    